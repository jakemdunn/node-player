{"version":3,"sources":["auth.js","socket.js"],"names":["app","factory","socket","$rootScope","$location","AUTH_EVENTS","AuthService","_this","this","authenticated","user","login","pass","emit","logout","isAuthenticated","isAuthorized","authorizedRoles","angular","isArray","some","role","roles","indexOf","init","on","$broadcast","loginSuccess","redirect","path","loginFailed","params","name","notAuthorized","$on","event","next","data","preventDefault","notAuthenticated","originalPath","constant","logoutSuccess","sessionTimeout","all","admin","socketFactory","ioSocket","io","connect"],"mappings":"AAAAA,IAAAC,QAAA,eAAA,SAAA,aAAA,YAAA,cAAA,SAAAC,EAAAC,EAAAC,EAAAC,GAEA,QAAAC,KACA,GAAAC,GAAAC,IAEAD,GAAAE,eAAA,EACAF,EAAAG,KAAA,KAEAH,EAAAI,MAAA,SAAAD,EAAAE,GACAV,EAAAW,KAAA,QAAAH,EAAAE,IAGAL,EAAAO,OAAA,WACAZ,EAAAW,KAAA,WAGAN,EAAAQ,gBAAA,WACA,MAAAR,GAAAE,eAGAF,EAAAS,aAAA,SAAAC,GAIA,MAHAC,SAAAC,QAAAF,KACAA,GAAAA,IAEAV,EAAAQ,mBAAAE,EAAAG,KAAA,SAAAC,GACA,MAAAd,GAAAG,KAAAY,MAAAC,QAAAF,IAAA,KAIAd,EAAAiB,KAAA,WAGAtB,EAAAuB,GAAA,cAAA,SAAAhB,EAAAC,GAEAH,EAAAE,cAAAA,EACAF,EAAAG,KAAAA,EAEAD,GACAN,EAAAuB,WAAArB,EAAAsB,aAAApB,EAAAG,MAGAH,EAAAqB,UACAxB,EAAAyB,KAAAtB,EAAAqB,UACArB,EAAAqB,SAAA,MACA,UAAAxB,EAAAyB,QACAzB,EAAAyB,KAAA,OAGA1B,EAAAuB,WAAArB,EAAAyB,aACA1B,EAAAyB,KAAA,aAIA3B,EAAAuB,GAAA,aAAA,SAAAM,GACAA,EAAArB,KAAAsB,MAAAzB,EAAAG,KAAAsB,MAEA7B,EAAAuB,WAAArB,EAAA4B,iBAIA9B,EAAA+B,IAAA,oBAAA,SAAAC,EAAAC,GAGA,GAAAA,EAAAC,MAAAD,EAAAC,KAAApB,gBAAA,CAEA,GAAAA,GAAAmB,EAAAC,KAAApB,eACAV,GAAAS,aAAAC,KACAkB,EAAAG,iBACA/B,EAAAQ,kBAEAZ,EAAAuB,WAAArB,EAAA4B,gBAGA9B,EAAAuB,WAAArB,EAAAkC,kBACAnC,EAAAyB,KAAA,UACAtB,EAAAqB,SAAAQ,EAAAI,mBAOA,MAAA,IAAAlC,MAGAN,IAAAyC,SAAA,eACAd,aAAA,qBACAG,YAAA,oBACAY,cAAA,sBACAC,eAAA,uBACAJ,iBAAA,yBACAN,cAAA,wBAGAjC,IAAAyC,SAAA,cACAG,IAAA,IACAC,MAAA,QACAnC,KAAA,SCjGAV,IAAAC,QAAA,UAAA,gBAAA,SAAA6C,GAEA,MAAAA,IACAC,SAAAC,GAAAC,QAAA","file":"factories.js","sourcesContent":["app.factory('AuthService', ['socket','$rootScope','$location','AUTH_EVENTS',function (socket,$rootScope,$location,AUTH_EVENTS) {\n\n\tfunction AuthService(){\n\t\tvar _this = this;\n\n\t\t_this.authenticated = false;\n\t\t_this.user = null;\n \n\t\t_this.login = function (user,pass) {\n\t\t\tsocket.emit('login',user,pass);\n\t\t};\n\n\t\t_this.logout = function() {\n\t\t\tsocket.emit('logout');\n\t\t};\n\t \n\t\t_this.isAuthenticated = function () {\n\t\t\treturn _this.authenticated;\n\t\t};\n\t \n\t\t_this.isAuthorized = function (authorizedRoles) {\n\t\t\tif (!angular.isArray(authorizedRoles)) {\n\t\t\t\tauthorizedRoles = [authorizedRoles];\n\t\t\t}\n\t\t\treturn (_this.isAuthenticated() && authorizedRoles.some(function (role) {\n\t\t\t\treturn _this.user.roles.indexOf(role) >= 0;\n\t\t\t}));\n\t\t};\n\n\t\t_this.init = function() {\n\n\t\t\t// Listen for events from our socket connection\n\t\t\tsocket.on('loginStatus',function(authenticated,user){\n\n\t\t\t\t_this.authenticated = authenticated;\n\t\t\t\t_this.user = user;\n\n\t\t\t\tif(authenticated){\n\t\t\t\t\t$rootScope.$broadcast(AUTH_EVENTS.loginSuccess,_this.user);\n\n\t\t\t\t\t// Redirect if we were authenticating a requested url\n\t\t\t\t\tif(_this.redirect){\n\t\t\t\t\t\t$location.path(_this.redirect);\n\t\t\t\t\t\t_this.redirect = null;\n\t\t\t\t\t}else if($location.path() == '/login'){\n\t\t\t\t\t\t$location.path('/');\n\t\t\t\t\t}\n\t\t\t\t}else{\n\t\t\t\t\t$rootScope.$broadcast(AUTH_EVENTS.loginFailed);\n\t\t\t\t\t$location.path('/login');\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tsocket.on('userDenied', function (params) {\n\t\t\t\tif(params.user.name != _this.user.name) return;\n\n\t\t\t\t$rootScope.$broadcast(AUTH_EVENTS.notAuthorized);\n\t\t\t});\n\n\t\t\t// Handle authentication on route changes\n\t\t\t$rootScope.$on('$routeChangeStart', function (event,next,current) {\n\n\t\t\t\t// Access to this route isn't restricted\n\t\t\t\tif(!next.data || !next.data.authorizedRoles) return;\n\n\t\t\t\tvar authorizedRoles = next.data.authorizedRoles;\n\t\t\t\tif (!_this.isAuthorized(authorizedRoles)) {\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\tif (_this.isAuthenticated()) {\n\t\t\t\t\t\t// user is not allowed\n\t\t\t\t\t\t$rootScope.$broadcast(AUTH_EVENTS.notAuthorized);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// user is not logged in\n\t\t\t\t\t\t$rootScope.$broadcast(AUTH_EVENTS.notAuthenticated);\n\t\t\t\t\t\t$location.path( '/login' );\n\t\t\t\t\t\t_this.redirect = next.originalPath;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\treturn new AuthService();\n}]);\n\napp.constant('AUTH_EVENTS', {\n\tloginSuccess: 'auth-login-success',\n\tloginFailed: 'auth-login-failed',\n\tlogoutSuccess: 'auth-logout-success',\n\tsessionTimeout: 'auth-session-timeout',\n\tnotAuthenticated: 'auth-not-authenticated',\n\tnotAuthorized: 'auth-not-authorized'\n});\n\napp.constant('USER_ROLES', {\n\tall: '*',\n\tadmin: 'admin',\n\tuser: 'user'\n})","app.factory('socket', ['socketFactory',function (socketFactory) {\n\n\treturn socketFactory({\n\t\tioSocket: io.connect('/')\n\t});\n}]);"],"sourceRoot":"/source/"}